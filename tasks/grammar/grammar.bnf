<program>           ::= <item> <program> | ""
<item>              ::= <function> | <struct>
<item-name>         ::= <ident> | <ident> "<" <ident-list> ">"
<ident-list>        ::= <ident> | <ident> "," <ident-list>

<struct>            ::= "struct" <item-name> "{" <field-list> "}"
<field-list>        ::= "" | <field> | <field> "," <field-list>
<field>             ::= <ident> ":" <type>

<function-type>     ::= "extern" | ""
<function>          ::= <function-type> <function-header> <function-body>
<function-body>     ::= <block> | ";"
<function-header>   ::= "fn" <item-name> "(" <param-list> ")" "->" <type> | "fn" <item-name> "(" <param-list> ")"
<param-list>        ::= "" | <param> | <param> "," <param-list>
<param>             ::= <opt-mut> <ident> ":" <type>

<type>              ::= "_" | "*" <type> | "*" "mut" <type> | <fn-type> | <type-name> | <builtin-type>
<fn-type>           ::= "fn" "(" <type-list> ")" "->" <type> | "fn" "(" <type-list> ")"
<type-list>         ::= "" | <type> | <type> "," <type-list>
<type-name>         ::= <ident> | <ident> "<" <type-param-list> ">"
<builtin-type>      ::= "u8" | "u16" | "u32" | "i8" | "i16" | "i32" | "bool" | "unit"
<type-param-list>   ::= <type> | <type> "," <type-param-list>

<block>             ::= "{" <statement-list> "}"
<statement-list>    ::= "" | <statement> <statement-list>
<statement>         ::= <if> | <loop> | <while> | <break> | <cont> | <return> | <let> | <block> | <expr-statement>
<if>                ::= "if" <expr> <block> <opt-else>
<opt-else>          ::= "" | "else" <block> | "else" <if>
<loop>              ::= "loop" <block>
<while>             ::= "while" <expr> <block>
<break>             ::= "break" ";"
<cont>              ::= "continue" ";"
<return>            ::= "return" <expr> ";" | "return" ";"
<expr-statement>    ::= <expr> ";"

<let>               ::= "let" <opt-mut> <ident> <opt-type> <opt-initializer> ";"
<opt-mut>           ::= "mut" | ""
<opt-type>          ::= "" | ":" <type>
<opt-initializer>   ::= "" | "=" <expr>

<expr>              ::= <assign>
<assign>            ::= <or> | <or> "=" <assign>
<or>                ::= <and> | <or> "||" <and>
<and>               ::= <equation> | <and> "&&" <equation>
<equation>          ::= <comparision> | <equation> <equation-op> <comparision>
<comparision>       ::= <sum> | <comparision> <compare-op> <sum>
<sum>               ::= <product> | <sum> <add-op> <product>
<product>           ::= <cast> | <product> <mul-op> <cast>
<cast>              ::= <unary> | <cast> "as" <type>
<unary>             ::= <call> | <unary-op> <unary>
<call>              ::= <term> | <call> "." <ident> | <call> "(" <call-param-list> ")"
<term>              ::= <literal> | <name> | "(" <expr> ")"

<call-param-list>   ::= "" | <call-param> | <call-param> "," <call-param-list>
<call-param>        ::= <expr> | <ident> ":" <expr>

<equation-op>       ::= "==" | "!="
<compare-op>        ::= "<" | "<=" | ">" | ">="
<add-op>            ::= "+" | "-"
<mul-op>            ::= "*" | "/" | "%"
<unary-op>          ::= "+" | "-" | "*" | "&" | "&" "mut" | "!"

<name>              ::= <ident> | <ident> "::" "<" <type-param-list> ">"

-- below is lexer stuff

<ident>             ::= <letter> <ident-suffix> | "_" <ident-char> <ident-suffix>
<ident-suffix>      ::= "" | <ident-char> <ident-suffix>
<ident-char>        ::= "_" | <letter> | <digit>

<literal>           ::= <bool> | <int> | <char> | <string>

<bool>              ::= "true" | "false"
<digit-sequence>    ::= <digit> | <non-zero-digit> <int>
<int>               ::= <digit-sequence> | <digit-sequence> <int-suffix>
<int-suffix>        ::= "i" | "u" | "i8" | "i16" | "i32" | "u8" | "u16" | "u32"
<char>              ::= "'" <string-char> "'" | "'\"'"
<string>            ::= "\"" <string-suffix>
<string-suffix>     ::= "\"" | <string-char> <string-suffix> | "'" <string-suffix>

<letter>            ::= <uppercase> | <lowercase>
<uppercase>         ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
<lowercase>         ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
<non-zero-digit>    ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<digit>             ::= "0" | <non-zero-digit>

<hex-digit>         ::= <digit> | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"
<escape>            ::= "\\x" <hex-digit> <hex-digit>
<string-char>       ::= <printable> | "\\n" | "\\\"" | "\\'" | "\\\\" | <escape>
<printable>         ::= <letter> | <digit> | " " | "!" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "[" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~"
